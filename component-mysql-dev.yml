#### Mysql Server ####
#####In this section you can set configuration parameters for Advanced Launch or which can be changed later for instance reconfiguration
application:
  configuration:
    input.db-port: 3306 ### Mysql listen port
    input.db-root-password: "uR1zaebah0Qu" ### Mysql root password
    input.operation-system: {image: "us-east-1/ami-1ba18d72", identity: ec2-user} ### used image/identity pair fordescribing Operating system.
    input.instance-size: "m1.small"
    input.recipe-url: "https://s3.amazonaws.com/qubell-starter-kit-artifacts/qubell-bazaar/component-mysql-dev-cookbooks-stable-c78020b.tar.gz"

####### Root Application Interfaces. Here we describe a interfaces with pins  and their bindings on  components  interfaces

  interfaces: 
    input:
      db-port: "bind(workflow#input.db-port)"
      db-root-password: "bind(workflow#input.db-root-password)"
      operation-system: "bind(workflow#input.operation-system)"
      instance-size: "bind(workflow#input.instance-size)"
      recipe-url: "bind(workflow#input.recipe-url)"
    mysql: ### combined interface for actions/output pins
      schema: "bind(workflow#actions.schema-management)"
      db: "bind(workflow#actions.db-management)"
      user: "bind(workflow#actions.user-management)"
      file-query: "bind(workflow#actions.file-query)"
      db-host: "bind(workflow#result.db-host)"
      db-port: "bind(workflow#result.db-port)"
      dbms: "bind(workflow#result.dbms)"

####### Components definitions ########

  components:
 #### Single component workflow
    workflow:
      type: workflow.Instance ### http://docs.qubell.com/developer/workflow-instance.html
      interfaces:
        input:
          operation-system:
             type: configuration(map<string,object>)
             suggestions: ### Create dropdown menu in advanced launch
                 "centos": {image: "us-east-1/ami-bf5021d6", identity: root}
                 "amazon": {image: "us-east-1/ami-1ba18d72", identity: ec2-user}
                 "ubuntu1204": {image: "us-east-1/ami-967edcff", identity: ubuntu}
                 "ubuntu1004": {image: "us-east-1/ami-9f3906f6", identity: ubuntu}
          db-port:
             type: configuration(int)
             name: Database listen port
          db-root-password:
             type: configuration(string)
             name: Database root password
          instance-size:
             type: configuration(string)
             name: VM size m1.small for example
          recipe-url:
             type: configuration(string)
             name: Cookbooks  url
        actions:
          schema-management:
             type: receive-command(string db-user, string db-user-password, list<string> db-user-privileges => object connection)
             name: Manage Schema
          db-management:
             type: receive-command(string db-name, string db-action)
             name: Database Management
          user-management:
             type: receive-command(list<string> app-hosts, string db-name, string db-user, string db-user-password, list<string> db-user-privileges, string user-action)
             name: User Management
          file-query:
             type: receive-command(object connection, list<string> sql-url)
             name: Run Sql Query
        result:
          dbms:
             type: publish-signal(object)
             name: Database Parameters
          #for ui only
          db-port:
             type: publish-signal(int)
             name: Database listen port
          db-host:
             type: publish-signal(string)
             name: Database Host 

      configuration:
        configuration.workflows:  
          launch: ###  Launch workflow used for provision/install phase
            steps:
              - provision-vm: ### Action "provisionAmazonVm" provision vm on Amazon EC2 and return  ips list
                  action: provisionVms
                  parameters:
                    hardwareId: "{$.instance-size}"
                    imageId: "{$.operation-system.image}"
                    vmIdentity: "{$.$.operation-system.identity}"
                    roleName: default
                  output: ### Step output values will be used in workflow return section below
                    db-host: ips

              - install-mysql-db: ### Action "chefsolo" search cookbooks archive by  specified recipeUrl and run recipe descrbed in runList with provided attributes
                  action: "chefsolo"
                  precedingPhases: [ provision-vm ]
                  parameters:
                    roles: [ default ]
                    runList: ["recipe[mysql_component]"]
                    recipeUrl: "{$.recipe-url}"
                    jattrs:
                      mysql:
                        server_root_password: "{$.db-root-password}"
                        server_repl_password: "{$.db-root-password}"
                        server_debian_password: "{$.db-root-password}"
                        port: "{$.db-port}"

            return: ### This values we want to see on application dashboard
              db-host:
                value: "{$.db-host[0]}"
              db-port:
                value: "{$.db-port}"
              dbms:
                value:
                   db-admin-uri: "mysql://root:{$.db-root-password}@{$.db-host}:{$.db-port}"
                   db-type: "mysql"
                   db-root-user: "root"
                   db-root-password: "{$.db-root-password}"
                   db-host: "{$.db-host}"
                   db-port: "{$.db-port}"
                   db-driver: "com.mysql.jdbc.Driver"

          db-management: ### Additional workflow for Database management
            steps:
              - manage-db:
                  action: "chefsolo"
                  parameters:
                    roles: [ default ]
                    runList: [ "recipe[mysql_component::db_manage]" ]
                    recipeUrl: "{$.recipe-url}"
                    jattrs:
                      mysql:
                        server_root_password: "{$.db-root-password}"
                        port: "{$.db-port}"
                      mysql_component:
                        schema:
                          dbname: "{$.db-name}"
                          db_action: "{$.db-action}"

          user-management: ### Additional workflow for User management
            steps:
              - manage-user:
                  action: "chefsolo"
                  parameters:
                    roles: [ default ]
                    runList: [ "recipe[mysql_component::user_manage]" ]
                    recipeUrl: "{$.recipe-url}"
                    jattrs:
                      mysql:
                        server_root_password: "{$.db-root-password}"
                        db-port: "{$.db-port}"
                      mysql_component:
                        schema:
                          dbname: "{$.db-name}"
                          username: "{$.db-user}"
                          password: "{$.db-user-password}"
                          privileges: "{$.db-user-privileges}"
                          action: "{$.user-action}"
                        hosts: "{$.app-hosts}"

          schema-management: ### Additional workflow for Schema management
            steps:
              - create-db:
                  action: "chefsolo"
                  parameters:
                    roles: [ default ]
                    runList: [ "recipe[mysql_component::db_manage]" ]
                    recipeUrl: "{$.recipe-url}"
                    jattrs:
                      mysql:
                        server_root_password: "{$.db-root-password}"
                        port: "{$.db-port}"
                      mysql_component:
                        schema:
                          dbname: "{$.db-user}"
                          db_action: "create"
              - create-user:
                  action: "chefsolo"
                  precedingPhases: [ create-db ]
                  parameters:
                    roles: [ default ]
                    runList: [ "recipe[mysql_component::user_manage]" ]
                    recipeUrl: "{$.recipe-url}"
                    jattrs:
                      mysql:
                        server_root_password: "{$.db-root-password}"
                        db-port: "{$.db-port}"
                      mysql_component:
                        schema:
                          dbname: "{$.db-user}"
                          username: "{$.db-user}"
                          password: "{$.db-user-password}"
                          privileges: "{$.db-user-privileges}"
                          action: "grant"
                        hosts: ["%"]
            return:
              connection:
                value:
                  db-user-uri: "mysql://{$.db-user}:{$.db-user-password}@{$.db-host}:{$.db-port}/{$.db-user}"
                  db-type: "mysql"
                  db-name: "{$.db-user}"
                  db-user: "{$.db-user}"
                  db-user-password: "{$.db-user-password}"
                  db-host: "{$.db-host}"
                  db-port: "{$.db-port}"
                  db-driver: "com.mysql.jdbc.Driver"
                  db-dstype: "javax.sql.DataSource"
                  connection-url: "jdbc:mysql://{$.db-host}:{$.db-port}/{$.db-user}?autoReconnect=true"
                  validation-query: "select 1"

          file-query: ### Additional workflow for run Sql Query
            steps:
              - run-file-query:
                  action: "chefsolo"
                  parameters:
                    roles: [ default ]
                    runList: [ "recipe[mysql_component::file_query]" ]
                    recipeUrl: "{$.recipe-url}"
                    jattrs:
                      mysql:
                        db-port: "{$.db-port}"
                      mysql_component:
                        schema:
                          dbname: "{$.connection.db-name}"
                          username: "{$.connection.db-user}"
                          password: "{$.connection.db-user-password}"
                        sql_url: "{$.sql-url}"
